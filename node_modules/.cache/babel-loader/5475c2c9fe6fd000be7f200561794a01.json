{"ast":null,"code":"import _slicedToArray from \"/Users/anthony/Desktop/personal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/anthony/Desktop/personal/client/src/pages/contact.js\";\nimport React, { useState } from 'react';\nimport '../styles/App.css';\nimport '../styles/contact.css';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport { Linkedin } from 'react-bootstrap-icons';\nimport { EnvelopeFill } from 'react-bootstrap-icons';\nimport { Github } from 'react-bootstrap-icons';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nfunction Contact() {\n  var _this = this;\n\n  var _useForm = useForm({\n    criteriaMode: 'all'\n  }),\n      register = _useForm.register,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset;\n\n  var onSubmit = function onSubmit(data, e) {\n    e.preventDefault();\n    sendEmail(data, e);\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      recaptchaError = _useState2[0],\n      setRecapError = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sendSuccess = _useState4[0],\n      msgSent = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      apiResponse = _useState6[0],\n      setAPIRes = _useState6[1];\n\n  function sendEmail(data, e) {\n    var info = {\n      from_name: data.name,\n      from_email: data.email,\n      message: data.message\n    };\n    e.preventDefault();\n    fetch(\"http://localhost:8080/email/\", {\n      method: 'POST',\n      body: JSON.stringify(info),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return console.log(res);\n    }); // msgSent(true)\n    // setRecapError(false)\n    // e.target.reset()\n    // if((/\\brecaptcha\\b/gi).test(error.text)){setRecapError(true)}\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container shadow bg-white padding\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"my-3 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, \"Let's Get In Touch\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    xs: 3,\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://www.linkedin.com/in/a-greenwell/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Linkedin, {\n    color: \"#7691c0\",\n    size: 38,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    xs: 3,\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://github.com/the-greenwell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Github, {\n    color: \"#7691c0\",\n    size: 38,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shadow jumbotron contact\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    className: \"text-center \".concat(sendSuccess ? '' : 'd-none'),\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, \"Success! Your message has been sent\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, \"Name\", /*#__PURE__*/React.createElement(\"small\", {\n    className: \"req-tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 37\n    }\n  }, \"(Required)\")), /*#__PURE__*/React.createElement(ErrorMessage, {\n    className: \"invalid-feedback\",\n    name: \"name\",\n    errors: errors,\n    render: function render(_ref) {\n      var message = _ref.message;\n      return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"flex-left error-msg\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 26\n        }\n      }, message);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"name\",\n    placeholder: \"Enter name\",\n    className: \"form-control \".concat(errors.name ? \"is-invalid\" : \"\"),\n    ref: register({\n      required: 'Please enter your name',\n      minLength: {\n        value: 3,\n        message: 'Name must be minimum three (3) characters'\n      },\n      maxLength: {\n        value: 25,\n        message: 'Name cannot exceed twenty-five (25) characters'\n      },\n      pattern: {\n        value: /^[a-z ,.'-]+$/i,\n        message: 'Invalid characters, '\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"Email Address \", /*#__PURE__*/React.createElement(\"small\", {\n    className: \"req-tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 47\n    }\n  }, \"(Required)\")), /*#__PURE__*/React.createElement(ErrorMessage, {\n    className: \"invalid-feedback\",\n    name: \"email\",\n    errors: errors,\n    render: function render(_ref2) {\n      var message = _ref2.message;\n      return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"flex-left error-msg\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 27\n        }\n      }, message);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"email\",\n    placeholder: \"Enter email\",\n    className: \"form-control \".concat(errors.email ? \"is-invalid\" : \"\"),\n    ref: register({\n      required: 'Please enter your email',\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n        message: \"Invalid email address format\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Text, {\n    className: \"text-muted text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }, \"I'll never share your data with anyone else.\")), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }\n  }, \"Message \", /*#__PURE__*/React.createElement(\"small\", {\n    className: \"req-tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 58\n    }\n  }, \"(Required) *Max 500 characters*\")), /*#__PURE__*/React.createElement(ErrorMessage, {\n    className: \"invalid-feedback\",\n    name: \"message\",\n    errors: errors,\n    render: function render(_ref3) {\n      var message = _ref3.message;\n      return /*#__PURE__*/React.createElement(\"p\", {\n        className: \"flex-left error-msg\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 27\n        }\n      }, message);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"textarea\", {\n    rows: \"5\",\n    name: \"message\",\n    maxLength: \"500\",\n    className: \"form-control \".concat(errors.message ? \"is-invalid\" : \"\"),\n    ref: register({\n      required: 'Please enter a message',\n      minLength: {\n        value: 10,\n        message: 'Message must be at least 10 characters long'\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, recaptchaError ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error-msg text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 25\n    }\n  }, \"Please complete ReCAPTCHA\") : '', /*#__PURE__*/React.createElement(ReCAPTCHA, {\n    sitekey: \"6LfMHV4aAAAAACwEKBQQLzoE2KZ-2k0bKlP2rf64\",\n    className: \"recaptcha\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    lg: 12,\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"submit mt-3\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, \"Submit\"))))))));\n}\n\nexport default Contact;","map":{"version":3,"sources":["/Users/anthony/Desktop/personal/client/src/pages/contact.js"],"names":["React","useState","Col","Row","Form","Button","Alert","Linkedin","EnvelopeFill","Github","useForm","ErrorMessage","ReCAPTCHA","Contact","criteriaMode","register","errors","handleSubmit","reset","onSubmit","data","e","preventDefault","sendEmail","recaptchaError","setRecapError","sendSuccess","msgSent","apiResponse","setAPIRes","info","from_name","name","from_email","email","message","fetch","method","body","JSON","stringify","headers","then","res","console","log","required","minLength","value","maxLength","pattern"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport '../styles/App.css';\nimport '../styles/contact.css';\n\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\n\nimport { Linkedin } from 'react-bootstrap-icons'\nimport { EnvelopeFill } from 'react-bootstrap-icons'\nimport { Github } from 'react-bootstrap-icons'\n\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\nimport ReCAPTCHA from 'react-google-recaptcha'\n\n\nfunction Contact() {\n  const { register, errors, handleSubmit, reset } = useForm({\n    criteriaMode: 'all',\n  });\n  const onSubmit = (data, e) => {\n    e.preventDefault();\n    sendEmail(data, e);\n  }\n\n  const [recaptchaError, setRecapError] = useState(false)\n  const [sendSuccess, msgSent] = useState(false)\n  const [apiResponse, setAPIRes] = useState('')\n\n\n  function sendEmail(data, e){\n    var info = {\n      from_name: data.name,\n      from_email: data.email,\n      message: data.message\n    }\n    e.preventDefault();\n    fetch(\"http://localhost:8080/email/\", {\n      method: 'POST',\n      body: JSON.stringify(info),\n      headers: { 'Content-Type': 'application/json'}\n    })\n        .then(res => console.log(res));\n\n        // msgSent(true)\n        // setRecapError(false)\n        // e.target.reset()\n        // if((/\\brecaptcha\\b/gi).test(error.text)){setRecapError(true)}\n    }\n\n    return(\n      <div className='content'>\n        <div className='container shadow bg-white padding'>\n          <Row>\n            <Col>\n              <h1 className='my-3 text-center'>Let's Get In Touch</h1>\n              <hr/>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs={3}>\n            </Col>\n\n            <Col xs={3} className='text-center'>\n              <a href='https://www.linkedin.com/in/a-greenwell/'>\n                <Linkedin color='#7691c0' size={38} />\n              </a>\n            </Col>\n\n            <Col xs={3} className='text-center'>\n              <a href='https://github.com/the-greenwell'>\n                <Github color='#7691c0' size={38} />\n              </a>\n            </Col>\n\n            <Col xs={3}>\n            </Col>\n          </Row>\n          <hr/>\n\n          <div className='container-fluid'>\n            <div className='shadow jumbotron contact'>\n              <Alert className={`text-center ${ sendSuccess ? '' : 'd-none'}`} variant='success'>\n                Success! Your message has been sent\n              </Alert>\n              <Form onSubmit={handleSubmit(onSubmit)} className='row'>\n                <Col lg={12}>\n                  <Form.Group controlId=\"formName\">\n                    <Form.Label>Name<small className='req-tag'>(Required)</small></Form.Label>\n                    <ErrorMessage className=\"invalid-feedback\" name=\"name\" errors={errors}\n                      render={({ message }) =>\n                         <p className='flex-left error-msg'>{message}</p>\n                      }\n                    />\n                    <input\n                      name='name'\n                      placeholder='Enter name'\n                      className={`form-control ${\n            \t\t\t\t\t\terrors.name ? \"is-invalid\" : \"\"\n            \t\t\t\t\t}`}\n                      ref={register({\n                        required: 'Please enter your name',\n                        minLength: {\n                          value: 3,\n                          message: 'Name must be minimum three (3) characters'\n                        },\n                        maxLength: {\n                          value: 25,\n                          message: 'Name cannot exceed twenty-five (25) characters'\n                        },\n                        pattern: {\n                          value: /^[a-z ,.'-]+$/i,\n                          message: 'Invalid characters, '\n                        }\n                        })}\n                    />\n                  </Form.Group>\n                </Col>\n                <Col md={12}>\n                  <Form.Group controlId=\"formEmail\">\n                    <Form.Label>Email Address <small className='req-tag'>(Required)</small></Form.Label>\n                    <ErrorMessage className=\"invalid-feedback\" name=\"email\" errors={errors}\n                      render={({ message }) =>\n                          <p className='flex-left error-msg'>{message}</p>\n                      }\n                    />\n                    <input\n                      name='email'\n                      placeholder='Enter email'\n                      className={`form-control ${\n            \t\t\t\t\t\terrors.email ? \"is-invalid\" : \"\"\n            \t\t\t\t\t}`}\n                      ref={register({\n                        required: 'Please enter your email',\n                        pattern: {\n              \t\t\t\t\t\tvalue: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n              \t\t\t\t\t\tmessage: \"Invalid email address format\"\n                        }\n                      })}\n                    />\n                  </Form.Group>\n                </Col>\n                <Col lg={12}>\n                  <Form.Text className=\"text-muted text-center\">\n                    I'll never share your data with anyone else.\n                  </Form.Text>\n                </Col>\n                <Col lg={12}>\n                  <Form.Group controlId=\"formMsg\">\n                    <Form.Label className='mt-2'>Message <small className='req-tag'>(Required) *Max 500 characters*</small></Form.Label>\n                    <ErrorMessage className=\"invalid-feedback\" name=\"message\" errors={errors}\n                      render={({ message }) =>\n                          <p className='flex-left error-msg'>{message}</p>\n                      }\n                     />\n                    <textarea\n                      rows='5'\n                      name='message'\n                      maxLength='500'\n                      className={`form-control ${\n            \t\t\t\t\t\terrors.message ? \"is-invalid\" : \"\"\n            \t\t\t\t\t}`}\n                      ref={register({\n                        required: 'Please enter a message',\n                        minLength: {\n                          value: 10,\n                          message: 'Message must be at least 10 characters long'\n                        }\n                      })}\n                    />\n                  </Form.Group>\n                </Col>\n                <Col lg={12}>\n                  {\n                    recaptchaError ?\n                        <p className=\"error-msg text-center\">\n                          Please complete ReCAPTCHA\n                        </p>\n                    :\n                     ''\n                  }\n                  <ReCAPTCHA sitekey='6LfMHV4aAAAAACwEKBQQLzoE2KZ-2k0bKlP2rf64' className='recaptcha'/>\n                </Col>\n                <Col lg={12} className='text-center'>\n                  <Form.Group>\n                    <Button className='submit mt-3' type=\"submit\">\n                      Submit\n                    </Button>\n                  </Form.Group>\n                </Col>\n              </Form>\n\n            </div>\n          </div>\n\n        </div>\n      </div>\n    )\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}