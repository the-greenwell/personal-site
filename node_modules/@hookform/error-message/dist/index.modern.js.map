{"version":3,"file":"index.modern.js","sources":["../src/ErrorMessage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"],"names":["ErrorMessage","as","errors","name","message","render","rest","methods","useFormContext","error","get","messageFromRegister","types","props","Object","assign","children","React","messages"],"mappings":"oJAIMA,MAAAA,UAOJC,GACAA,EADAC,OAEAA,EAFAC,KAGAA,EAHAC,QAIAA,EAJAC,OAKAA,KACGC,kLAEH,MAAMC,EAAUC,IACVC,EAAQC,EAAIR,GAAUK,EAAQL,OAAQC,GAE5C,IAAKM,EACH,YAGF,MAAQL,QAASO,EAAXC,MAAgCA,GAAUH,EAC1CI,EAAQC,OAAOC,OAAO,GAAIT,EAAM,CACpCU,SAAUL,GAAuBP,IAGnC,OAAOa,EAAqBhB,GACxBgB,EAAmBhB,EAAIY,GACvBR,EACCA,EAAO,CACND,QAASO,GAAuBP,EAChCc,SAAUN,IAEZK,EAAqBhB,GAAiBgB,EAAgBJ"}